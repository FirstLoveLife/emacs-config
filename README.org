#+TITLE: config

** Meta
     If you place the following code into your emacs init when saving the
     ~/.dotfiles.org file the dotfiles will all be exported.

#+BEGIN_SRC emacs-lisp :tangle no
       (defun dotfiles-hook ()
         "If the current buffer is '~/.dotfiles.org' the code-blocks are
       tangled."
         (when (equal (buffer-file-name)
                      (expand-file-name (concat (getenv "HOME")
                                        "/.dotfiles.org")))
           (org-babel-tangle)))

       (add-hook 'after-save-hook 'dotfiles-hook)
     #+END_SRC

    

** presuite
*** arch
#+BEGIN_SRC bash
yay -S fcitx5-im fcitx5-configtool fcitx5-rime librime privoxy aspell-en v2ray tclap arandr neovim chromium fd jq cmake-language-server yarn manjaro-asian-input-support-fcitx5 qv2ray qv2ray-plugin-ssr-git rime-luna-pinyin rime-luna-pinyin rime-emoji xorg-fonts-misc fcitx5-pinyin-zhwiki rime-pinyin-zhwiki fcitx5-pinyin-moegirl

#+END_SRC
** rime and fcitx5

#+begin_src conf :tangle ~/.local/share/fcitx5/rime/default.custom.yaml :mkdirp yes

patch:
  schema_list:
    - schema: luna_pinyin
patch:
  "menu/page_size": 9
  'punctuator/import_preset': alternative
  'key_binder/import_preset': alternative
#+end_src

#+begin_src conf :tangle ~/.local/share/fcitx5/rime/alternative.yaml :mkdirp yes
# Rime alternative settings
# encoding: utf-8
#
# difference from default settings:
# 1. ascii-style punctuation in half-shape mode
# 2. [ ] as paging keys
#
# save this file as:
# (Linux)   ~/.config/ibus/rime/alternative.yaml
# (Mac OS)  ~/Library/Rime/alternative.yaml
# (Windows) "%APPDATA%\Rime\alternative.yaml"
#
# edit <SCHEMA_ID>.custom.yaml:
# >> patch:
# >>   'punctuator/import_preset': alternative
# >>   'key_binder/import_preset': alternative
#
# for detailed explanation, refer to:
# http://code.google.com/p/rimeime/wiki/CustomizationGuide#%E4%BD%BF%E7%94%A8%E5%85%A8%E5%A5%97%E8%A5%BF%E6%96%87%E6%A8%99%E9%BB%9E

config_version: "0.3"

punctuator:
  full_shape:
    " " : { commit: "　" }
    "," : { commit: ， }
    "." : { commit: 。 }
    "<" : [ 《, 〈, «, ‹ ]
    ">" : [ 》, 〉, », › ]
    "/" : [ 、, ／, "/", ÷ ]
    "?" : { commit: ？ }
    ";" : { commit: ； }
    ":" : ：
    "'" : { pair: [ "‘", "’" ] }
    "\"" : { pair: [ "“", "”" ] }
    "\\" : [ 、, ＼, "\\" ]
    "|" : [ ・, ｜, "|", "§", "¦" ]
    "`" : [ ｀, "`" ]
    "~" : [ 〜, "~", ～, 〰 ]
    "!" : { commit: ！ }
    "@" : [ ＠, "@", ☯ ]
    "#" : [ ＃, "#", ⌘ ]
    "%" : [ ％, "%", "°", "℃" ]
    "$" : [ ￥, "$", "€", "£", "¥", "¢", "¤" ]
    "^" : { commit: …… }
    "&" : [ ＆, "&" ]
    "*" : [ ＊, "*", ・, ×, ※, ❂, · ]
    "(" : （
    ")" : ）
    "-" : [ －, "-" ]
    "_" : ——
    "+" : [ ＋, "+" ]
    "=" : [ ＝, "=" ]
    "[" : [ 「, 【, 〔, ［ ]
    "]" : [ 」, 】, 〕, ］ ]
    "{" : [ 『, 〖, ｛ ]
    "}" : [ 』, 〗, ｝ ]
  half_shape:
    "," : { commit: "," }
    "." : { commit: "." }
    "<" : "<"
    ">" : ">"
    "/" : "/"
    "?" : { commit: "?" }
    ";" : { commit: ";" }
    ":" : { commit: ":" }
    "'" : "'"
    "\"" : "\""
    "\\" : "\\"
    "|" : "|"
    "`" : "`"
    "~" : "~"
    "!" : { commit: "!" }
    "@" : "@"
    "#" : "#"
    "%" : "%"
    "$" : "$"
    "^" : "^"
    "&" : "&"
    "*" : "*"
    "(" : "("
    ")" : ")"
    "-" : "-"
    "_" : "_"
    "+" : "+"
    "=" : "="
    "[" : "["
    "]" : "]"
    "{" : "{"
    "}" : "}"

key_binder:
  bindings:
    # commonly used paging keys
    - { when: composing, accept: ISO_Left_Tab, send: Page_Up }
    - { when: composing, accept: Shift+Tab, send: Page_Up }
    - { when: composing, accept: Tab, send: Page_Down }
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    - { when: paging, accept: comma, send: Page_Up }
    - { when: has_menu, accept: period, send: Page_Down }
    - { when: paging, accept: bracketleft, send: Page_Up }
    - { when: has_menu, accept: bracketright, send: Page_Down }

#+end_src

#+begin_src conf :tangle ~/.local/share/fcitx5/rime/luna_pinyin.custom.yaml
patch:
  "menu/page_size": 9
  "translator/dictionary": luna_pinyin.extended # 指定字典
  "punctuator/import_preset": alternative
  "key_binder/import_preset": alternative
  "switches/@0/reset": 1 #表示將 switcher 列表中的第一個元素（即 ascii_mode 開關）的初始值重設爲狀態1（即「英文」）。
  switches:                   # 注意缩进
    - name: ascii_mode
      reset: 0                # reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态
      states: [ 中文, 西文 ]   # 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0
    #- name: full_shape
    #  states: [ 半角, 全角 ]   # 而全／半角则可沿用之前方案的用法。
    - name: simplification
      reset: 1                # 增加这一行：默认启用「繁→簡」转换。
      states: [ 漢字, 汉字 ]

#+end_src

#+begin_src conf :tangle ~/.local/share/fcitx5/rime/luna_pinyin.extended.dict.yaml
---
# encoding: utf-8
name: luna_pinyin.extended
version: "2014.05.05"
sort: by_weight
use_preset_vocabulary: true
import_tables:
  - luna_pinyin
  - zhwiki # 导入zhwiki字典
  - moegirl
  - luna_pinyin.sogou

#+end_src

#+begin_src conf :tangle ~/.config/fcitx5/profile :mkdirp yes
[Groups/0]
# Group Name
Name=Default
# Layout
Default Layout=us
# Default Input Method
DefaultIM=rime

[Groups/0/Items/0]
# Name
Name=keyboard-us
# Layout
Layout=

[Groups/0/Items/1]
# Name
Name=rime
# Layout
Layout=

[GroupOrder]
0=Default
#+end_src
** bashrc
#+BEGIN_SRC conf :tangle ~/.bashrc
#
# ~/.bashrc
#

[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'
alias more=less

xhost +local:root > /dev/null 2>&1

complete -cf sudo

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

export CMAKE_EXPORT_COMPILE_COMMANDS=1
export GO111MODULE=on
export GOPROXY=https://goproxy.cn
PATH=$PATH:~/.emacs.d/bin:~/.local/bin
PATH=$PATH:~/.gem/ruby/2.7.0/bin/
PATH=$PATH:~/.local/bin/
PATH=$PATH:~/.opam/default/bin/
export NODE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/
#+END_SRC
** emacs
#+BEGIN_SRC conf
--with-xwidgets --with-imagemagick --with-sound=alsa --with-mailutils
#+END_SRC
** fish
#+BEGIN_SRC conf :tangle ~/.config/fish/config.fish :mkdirp yes
set -Ux CMAKE_EXPORT_COMPILE_COMMANDS 1
set -Ux CMAKE_GENERATOR 'Unix Makefiles'
set -Ux http_proxy 'http://127.0.0.1:8889'
set -Ux https_proxy 'http://127.0.0.1:8889'
set -Ux NODE_MIRROR 'https://mirrors.tuna.tsinghua.edu.cn/nodejs-release'
set -Ux GO111MODULE 'on'
set -Ux GOPROXY "https://goproxy.cn"
set -Ux JAVA_TOOL_OPTIONS "-Djava.net.useSystemProxies=true"
set -Ux JAVA_FLAGS "-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8889"
set -Ux MAVEN_OPTS "-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1089"
#+END_SRC

#+BEGIN_SRC conf :tangle ~/.config/fish/fish_variables :mkdirp yes
# This file contains fish universal variable definitions.
# VERSION: 3.0
SETUVAR __fish_initialized:3100
SETUVAR fish_color_autosuggestion:555\x1ebrblack
SETUVAR fish_color_cancel:\x2dr
SETUVAR fish_color_command:005fd7
SETUVAR fish_color_comment:990000
SETUVAR fish_color_cwd:green
SETUVAR fish_color_cwd_root:red
SETUVAR fish_color_end:009900
SETUVAR fish_color_error:ff0000
SETUVAR fish_color_escape:00a6b2
SETUVAR fish_color_history_current:\x2d\x2dbold
SETUVAR fish_color_host:normal
SETUVAR fish_color_host_remote:yellow
SETUVAR fish_color_match:\x2d\x2dbackground\x3dbrblue
SETUVAR fish_color_normal:normal
SETUVAR fish_color_operator:00a6b2
SETUVAR fish_color_param:00afff
SETUVAR fish_color_quote:999900
SETUVAR fish_color_redirection:00afff
SETUVAR fish_color_search_match:bryellow\x1e\x2d\x2dbackground\x3dbrblack
SETUVAR fish_color_selection:white\x1e\x2d\x2dbold\x1e\x2d\x2dbackground\x3dbrblack
SETUVAR fish_color_status:red
SETUVAR fish_color_user:brgreen
SETUVAR fish_color_valid_path:\x2d\x2dunderline
SETUVAR fish_greeting:Welcome\x20to\x20fish\x2c\x20the\x20friendly\x20interactive\x20shell\x0aType\x20\x60help\x60\x20for\x20instructions\x20on\x20how\x20to\x20use\x20fish
SETUVAR fish_key_bindings:fish_default_key_bindings
SETUVAR fish_pager_color_completion:\x1d
SETUVAR fish_pager_color_description:B3A06D\x1eyellow
SETUVAR fish_pager_color_prefix:white\x1e\x2d\x2dbold\x1e\x2d\x2dunderline
SETUVAR fish_pager_color_progress:brwhite\x1e\x2d\x2dbackground\x3dcyan
#+END_SRC
** tmux
#+BEGIN_SRC conf :tangle ~/.tmux.conf
set-option -g default-shell /usr/bin/fish
set -sg escape-time 0
#+END_SRC
** tmate
#+begin_src ~/.tmate.conf
source-file ~/.tmux.conf
#+end_src
** zshrc
#+BEGIN_SRC conf :tangle ~/.zshrc
## Options section
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path
# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500
export EDITOR=/usr/local/bin/emacs
#export VISUAL=/usr/bin/nano
WORDCHARS=${WORDCHARS//\/[&.;]}                                 # Don't consider certain characters part of the word


## Keybindings section
bindkey -e
bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

## Alias section
alias cp="cp -i"                                                # Confirm before overwriting something
alias df='df -h'                                                # Human-readable sizes
alias free='free -m'                                            # Show sizes in MB
alias gitu='git add . && git commit && git push'

# Theming section
autoload -U compinit colors zcalc
compinit -d
colors

# enable substitution for prompt
setopt prompt_subst

# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors
 #PROMPT="%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ "
# Maia prompt
PROMPT="%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[cyan]%}>%B%(?.%{$fg[cyan]%}.%{$fg[red]%})>%{$reset_color%}%b " # Print some system information when the shell is first started
# Print a greeting message when shell is started
echo $USER@$HOST  $(uname -srm) $(lsb_release -rcs)
## Prompt on right side:
#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)
#  - shows exit status of previous command (if previous command finished with an error)
#  - is invisible, if neither is the case

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"                              # plus/minus     - clean repo
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"             # A"NUM"         - ahead by "NUM" commits
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"           # B"NUM"         - behind by "NUM" commits
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"       # red circle     - untracked files
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}●%{$reset_color%}"     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"        # green circle   - staged changes present = ready for "git push"

parse_git_branch() {
  # Show Git branch/tag, or name-rev if on detached head
  ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null
}

parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=""
  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi
}

git_prompt_string() {
  local git_where="$(parse_git_branch)"

  # If inside a Git repository, print its branch and state
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"

  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n "$git_where" ] && echo "%{$fg[red]%} %(?..[%?])"
}

# Right prompt with exit status of previous command if not successful
 #RPROMPT="%{$fg[red]%} %(?..[%?])"
# Right prompt with exit status of previous command marked with ✓ or ✗
 #RPROMPT="%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})"


# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r


## Plugins section: Enable fish style features
# Use syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Use history substring search
source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
# bind UP and DOWN arrow keys to history substring search
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Apply different settigns for different terminals
case $(basename "$(cat "/proc/$PPID/comm")") in
  login)
    	RPROMPT="%{$fg[red]%} %(?..[%?])"
    	alias x='startx ~/.xinitrc'      # Type name of desired desktop after x, xinitrc is configured for it
    ;;
#  'tmux: server')
#        RPROMPT='$(git_prompt_string)'
#		## Base16 Shell color themes.
#		#possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
#		#atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties,
#		#embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
#		#marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
#		#solarized, summerfruit, tomorrow, twilight
#		#theme="eighties"
#		#Possible variants: dark and light
#		#shade="dark"
#		#BASE16_SHELL="/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh"
#		#[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
#		# Use autosuggestion
#		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#  		ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#     ;;
  ,*)
        RPROMPT='$(git_prompt_string)'
		# Use autosuggestion
		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
  		ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    ;;
esac

export CMAKE_EXPORT_COMPILE_COMMANDS=1
PATH=$PATH:~/.gem/ruby/2.7.0/bin/
PATH=$PATH:~/.opam/default/bin/
export NODE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/
export GO111MODULE=on
export GOPROXY=https://goproxy.cn
#+END_SRC
** gitconfig
#+BEGIN_SRC quote
firstlove@manjaro ~/projects/github/linux master $ tail /etc/privoxy/config  -n1
forward-socks5 / 127.0.0.1:1092 .
#+END_SRC
#+BEGIN_SRC conf :tangle ~/.gitconfig
[user]
	name = "Chen Li"
	email = chenli@uniontech.com
	username = "Chen Li"
[core]
	editor = emacs
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
    filemode = false
[http]
    proxy = http://127.0.0.1:8889
[https]
    proxy = http://127.0.0.1:8889
[am]
    threeWay = true
[core]
    autocrlf = input
    eol = lf
    whitespace = cr-at-eol
[auto]
    crlf = false
#+END_SRC
** gitignore
#+BEGIN_SRC conf :tangle ~/.gitignore
# Compiled source #
###################
,*.com
,*.class
,*.dll
,*.exe
,*.o
,*.so

# Temporary files #
###################
,*.swp
,*.swo
,*~

# Packages #
############
,*.7z
,*.dmg
,*.gz
,*.iso
,*.jar
,*.rar
,*.zip

# Logs #
######################
# *.log

# OS generated files #
######################
.DS_Store*
ehthumbs.db
Icon?
Thumbs.db

,*.lock

# ccls
.ccls-cache/

# c/cpp
,*.out
#+END_SRC
** xonsh
#+BEGIN_SRC python :tangle ~/.xonshrc
aliases["p"]='proxychains'
$PATH.append('~/.emacs.d/bin')
$PATH.append('~/.local/bin')
$PATH.append('~/.gem/ruby/2.7.0/bin/')
$PROMPT = '{BOLD_GREEN}{user} {YELLOW}[{cwd}]\n{BLUE}-> {BOLD_BLUE}%{NO_COLOR} '
$CMAKE_GENERATOR = "Unix Makefiles"
$EDITOR = 'emacs'
$XONSH_STORE_STDOUT = True
$CMAKE_EXPORT_COMPILE_COMMANDS=1
$BROWSER = 'chromium'
$LANG="en_US.UTF-8"
$http_proxy="http://127.0.0.1:8889/"
$https_proxy="http://127.0.0.1:8889/"
$PATH.append('~/.opam/default/bin/')
$NODE_MIRROR="https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/"
$GO111MODULE="on"
$GOPROXY="https://goproxy.cn"
#+END_SRC
** xmonad
#+BEGIN_SRC haskell :tangle ~/.xmonad/xmonad.hs :mkdirp yes
import XMonad hiding ((|||))
import qualified XMonad.StackSet as W
import qualified Data.Map        as M

-- Useful for rofi
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys, additionalKeysP, additionalMouseBindings)
import System.IO
import System.Exit
-- Last window
import XMonad.Actions.GroupNavigation
-- Last workspace. Seems to conflict with the last window hook though so just
-- disabled it.
-- import XMonad.Actions.CycleWS
-- import XMonad.Hooks.WorkspaceHistory (workspaceHistoryHook)
import XMonad.Layout.Tabbed
import XMonad.Hooks.InsertPosition
import XMonad.Layout.SimpleDecoration (shrinkText)
-- Imitate dynamicLogXinerama layout
import XMonad.Util.WorkspaceCompare
import XMonad.Hooks.ManageHelpers
-- Order screens by physical location
import XMonad.Actions.PhysicalScreens
import Data.Default
-- For getSortByXineramaPhysicalRule
import XMonad.Layout.LayoutCombinators
-- smartBorders and noBorders
import XMonad.Layout.NoBorders
-- spacing between tiles
import XMonad.Layout.Spacing
-- Insert new tabs to the right: https://stackoverflow.com/questions/50666868/how-to-modify-order-of-tabbed-windows-in-xmonad?rq=1
-- import XMonad.Hooks.InsertPosition

--- Layouts
-- Resizable tile layout
import XMonad.Layout.ResizableTile
-- Simple two pane layout.
import XMonad.Layout.TwoPane
import XMonad.Layout.BinarySpacePartition
import XMonad.Layout.Dwindle

myTabConfig = def { activeColor = "#556064"
                  , inactiveColor = "#2F3D44"
                  , urgentColor = "#FDF6E3"
                  , activeBorderColor = "#454948"
                  , inactiveBorderColor = "#454948"
                  , urgentBorderColor = "#268BD2"
                  , activeTextColor = "#80FFF9"
                  , inactiveTextColor = "#1ABC9C"
                  , urgentTextColor = "#1ABC9C"
                  , fontName = "xft:Noto Sans CJK:size=10:antialias=true"
                  }

myLayout = avoidStruts $
  noBorders (tabbed shrinkText myTabConfig)
  ||| tiled
  ||| Mirror tiled
  -- ||| noBorders Full
  ||| twopane
  ||| Mirror twopane
  ||| emptyBSP
  ||| Spiral L XMonad.Layout.Dwindle.CW (3/2) (11/10) -- L means the non-main windows are put to the left.

  where
     -- The last parameter is fraction to multiply the slave window heights
     -- with. Useless here.
     tiled = spacing 3 $ ResizableTall nmaster delta ratio []
     -- In this layout the second pane will only show the focused window.
     twopane = spacing 3 $ TwoPane delta ratio
     -- The default number of windows in the master pane
     nmaster = 1
     -- Default proportion of screen occupied by master pane
     ratio   = 1/2
     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

myPP = def { ppCurrent = xmobarColor "#1ABC9C" "" . wrap "[" "]"
           , ppTitle = xmobarColor "#1ABC9C" "" . shorten 60
           , ppVisible = wrap "(" ")"
           , ppUrgent  = xmobarColor "red" "yellow"
           , ppSort = getSortByXineramaPhysicalRule def
           }

myManageHook = composeAll [ isFullscreen --> doFullFloat

                          ]

myStartupHook :: X()
myStartupHook = do
  spawn "bash ~/.screenlayout/arandr.sh"
  spawn "unclutter -grab &"
  spawn "redshift -P -O 3000"
  spawn "picom -b"
  -- spawn "feh --bg-center --bg-fill ~/projects/org/v1.jpg ~/projects/org/v2.jpg ~/projects/org/w.jpg"


main = do
    -- xmproc <- spawnPipe "xmobar"
    xmonad $ defaultConfig
        { modMask = mod4Mask
        -- , keys = myKeys
        , manageHook = manageDocks <+> myManageHook
        , layoutHook = myLayout
        , handleEventHook = handleEventHook def <+> docksEventHook
        , startupHook = myStartupHook <+> docksStartupHook
        --, logHook = dynamicLogWithPP myPP {
        --                                 ppOutput = hPutStrLn xmproc
        --                                  }
        --                >> historyHook
        , terminal = "terminology"
        -- This is the color of the borders of the windows themselves.
        , normalBorderColor  = "#2f3d44"
        , focusedBorderColor = "#1ABC9C"
        }
        `additionalKeysP`
        [
          ("M-b", spawn "rofi -combi-modi window,run,drun -show combi -modi combi")
          , ("M-S-b", spawn "rofi -show run")
          -- Restart xmonad. This is the same keybinding as from i3
          , ("M-S-c", spawn "xmonad --recompile; xmonad --restart")
          , ("M-S-q", kill)
          , ("M-'", windows W.swapMaster)
          , ("M-<Return>", spawn "konsole")
          -- Make it really hard to mispress...
          , ("M-M1-S-e", io (exitWith ExitSuccess))
          , ("M-M1-S-l", spawn "xlock")
          , ("M-M1-S-s", spawn "xlock && systemctl suspend")
          , ("M-M1-S-h", spawn "xlock && systemctl hibernate")
        ] `additionalMouseBindings`
        [ ((mod4Mask, button4), (\w -> windows W.focusUp))
        , ((mod4Mask, button5), (\w -> windows W.focusDown))
        ]

#+END_SRC
** xinitrc
#+BEGIN_SRC conf :tangle ~/.xinitrc :mkdirp yes
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export GTK_IM_MODULE DEFAULT=xim
export QT_IM_MODULE  DEFAULT=xim
# unclutter -grab &
exec xmonad
#+END_SRC
** xarand
#+BEGIN_SRC conf :tangle ~/.screenlayout/arandr.sh :mkdirp yes
#!/bin/sh
xrandr --output DisplayPort-0 --mode 3840x2160 --pos 3840x404 --rotate normal --output DisplayPort-1 --primary --mode 3840x2160 --pos 0x0 --rotate normal --output DisplayPort-2 --mode 3840x2160 --pos 7680x0 --rotate normal --output HDMI-A-0 --off --output DVI-D-0 --off
#+END_SRC
** org-protocol
*** test
after setting protocol in emacs correctly, use emacsclient to test:
#+BEGIN_SRC conf
emacsclient -n "org-protocol:///capture?url=http%3a%2f%2fduckduckgo%2ecom&title=DuckDuckGo"
#+END_SRC
*** firefox
#+BEGIN_SRC quote
add the following location in a firefox bookmark:
javascript:location.href="org-protocol:///capture?url="+encodeURIComponent(location.href)+"&title="+encodeURIComponent(document.title||"[untitled page]")
#+END_SRC
#+BEGIN_SRC conf :tangle ~/.local/share/applications/org-protocol.desktop :mkdirp yes
[Desktop Entry]
Name=org-protocol
Exec=emacsclient -n %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+END_SRC

*** xmonad
#+BEGIN_SRC conf
update-desktop-database ~/.local/share/applications/
#+END_SRC
** termite
#+BEGIN_SRC conf :tangle ~/.config/termite/config :mkdirp yes
[options]
font = Sarasa Term J 30

[colors]
background = rgba(63, 63, 63, 0.8)

#+END_SRC
** cargo
#+BEGIN_SRC conf :tangle ~/.cargo/config :mkdirp yes
[source.crates-io]
replace-with = 'tuna'

[source.tuna]
registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"
#+END_SRC
** picom
#+BEGIN_SRC conf :tangle  ~/.config/picom.conf :mkdirp yes
backend = "glx";

glx-no-stencil = true;
glx-no-rebind-pixmap = true;
use-damage = true;
xrender-sync-fence = true;
refresh-rate = 0;
vsync = true;

mark-wmwin-focused = true;
mark-ovredir-focused = true;
use-ewmh-active-win = true;

shadow = true;
shadow-radius = 3;
shadow-offset-x = -3;
shadow-offset-y = -3;
shadow-opacity = 0.5;
shadow-exclude = [
	"! name~=''",
	"name = 'Notification'",
	"name = 'xfce4-notifyd'",
	"name *= 'picom'",
	"name *= 'Chromium'",
	"class_g = 'Navigator' && argb",
	"class_g ?= 'Notify-osd'",
	"class_g ?= 'Cairo-dock'",
	"class_g ?= 'Xfce4-notifyd'",
	"class_g ?= 'Xfce4-power-manager'",
	"_GTK_FRAME_EXTENTS@:c",
	"bounding_shaped && !rounded_corners"
];

opacity-rule = [
    "100:class_g = 'Chromium' && focused",
    "80:class_g = 'Chromium' && !focused"
]

fading = true;
fade-delta = 5;
fade-in-step = 0.03;
fade-out-step = 0.03;
no-fading-openclose = true;
fade-exclude = [ ];

active-opacity = 1;
inactive-opacity = 0.9;
frame-opacity = 1;
inactive-opacity-override = false;
# blur-background = true;
# blur-background-frame = true;
blur-background-fixed = false;
blur-kern = "3x3box";
blur-background-exclude = [
	"window_type = 'dock'",
	"window_type = 'desktop'",
	"_GTK_FRAME_EXTENTS@:c"
];

unredir-if-possible = false;

detect-rounded-corners = true;
detect-client-opacity = true;
detect-transient = true;
detect-client-leader = true;

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = false;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
};


#+END_SRC
** wget
#+BEGIN_SRC conf :tangle  ~/.wgetrc :mkdirp yes
use_proxy=on
http_proxy=127.0.0.1:8889
https_proxy=127.0.0.1:8889
#+END_SRC
** redshift
#+BEGIN_SRC conf :tangle  ~/.config/redshift/redshift.conf :mkdirp yes
 [redshift]
 location-provider=manual

 [manual]
 lat=48.853
 lon=2.349
#+END_SRC
** stack
#+BEGIN_SRC conf :tangle ~/.stack/config.yaml :mkdirp yes
templates:
  params:
    author-name: chenli
    author-email: chenli@uniontech.com
    category: code
    copyright: 'Copyright: (c) 2016 li chen'
    github-username: firstlove

setup-info-locations: ["http://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml"]
urls:
  latest-snapshot: http://mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.json
#+END_SRC

** cabal
仓库：
#+BEGIN_SRC conf ~/.cabal/config :mkdirp yes
repository mirrors.ustc.edu.cn
  url: https://mirrors.ustc.edu.cn/hackage/
  secure: False
Cabal < 1.24
#+END_SRC

但是替换仓库就行了，不需要全覆盖，所以不 tangle 了
** xmobar
#+BEGIN_SRC haskell :tangle ~/.xmobarrc
 Config {
       font = "xft:Noto Sans:size=9:antialias=true,Noto Sans CJK SC:size=9:antialias=true"
       , bgColor = "#283339"
       , fgColor = "#F9fAF9"
       , position = TopW L 85
       , commands = [
                    Run Battery [ "--template" , "B: <acstatus>"
                                , "--L" , "15"
                                , "--H" , "75"
                                , "--low"      , "darkred"
                                , "--normal"   , "darkorange"
                                , "--high"     , "#1ABC9C"
                                , "--" -- battery specific options
                                       -- discharging status
                                       , "-o"   , "<left>% (<timeleft>)"
                                       -- AC "on" status
                                       , "-O"   , "<fc=#dAA520>Charging</fc>"
                                       -- charged status
                                       , "-i"   , "<fc=#1ABC9C>Charged</fc>"
                                ] 50
                    -- , Run Cpu [ "--template" , "C: <total>%", "-L","0","-H","50","--normal","#1ABC9C","--high","darkred"] 10
                    -- , Run Memory ["-t","M: <usedratio>%"] 10
                    , Run DiskU [("/", "D: <free>")] ["-L", "20", "-H", "60"] 10
                    -- , Run Swap [] 10
                    , Run Date "%a %d.%m. %H:%M" "date" 10
                    , Run StdinReader
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = "%StdinReader% }{ %battery% | %disku% | %date%"
       }

#+END_SRC
** coc-nvim
#+BEGIN_SRC json :tangle ~/.config/nvim/coc-settings.json :mkdirp yes
{
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
      "rootPatterns": [".ccls-root", "compile_commands.json"],
      "initializationOptions": {
        "cache": {
          "directory": "/home/firstlove/tmp/"
        },
        "client": {
          "snippetSupport": true
        }
      }
    }
  }
}
#+END_SRC
** ccls: generate-compile_commands.json-for-kernel
#+BEGIN_SRC python :tangle ~/.local/bin/kernel-compile_commands-json.py :mkdirp yes
import re
with open(".config", 'r') as fin, open(".ccls", "a+") as ccls:
    for line in fin:
        if re.search(r'CONFIG_.*=.', line):
            ccls.write("-D"+line)
#+END_SRC
** kak
#+begin_src conf :tangle ~/.config/kak-lsp/kak-lsp.toml :mkdirp yes
[language.c_cpp]
filetypes = ["c", "cpp"]
roots = [".ccls-root", "compile_commands.json"]
command = "ccls"
# kak-lsp does not support newText https://github.com/ul/kak-lsp/issues/40
args = ["--init={\"completion\":{\"detailedLabel\":false}}"]
#+end_src

#+begin_src conf :tangle ~/.config/kak/kakrc :mkdirp yes
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(c|cpp) %{
    lsp-enable-window
}
#+end_src
